generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  passwordHash  String
  firstName     String
  lastName      String
  profileImage  String?
  role          UserRole       @default(BAND_MEMBER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bandMembers   BandMember[]
  rehearsals    Rehearsal[]    @relation("CreatedBy")
  venues        Venue[]        @relation("VenueCreatedBy")
  attendance    Attendance[]
  availability  Availability[]
  rehearsalNotes RehearsalNote[]
}

enum UserRole {
  ADMIN
  BAND_MANAGER
  BAND_MEMBER
}

model Band {
  id          String       @id @default(uuid())
  name        String
  description String?
  creatorId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     BandMember[]
  rehearsals  Rehearsal[]
}

model BandMember {
  id        String       @id @default(uuid())
  userId    String
  bandId    String
  role      String?
  joinDate  DateTime     @default(now())
  status    MemberStatus @default(ACTIVE)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  band      Band         @relation(fields: [bandId], references: [id], onDelete: Cascade)

  @@unique([userId, bandId])
}

enum MemberStatus {
  ACTIVE
  INACTIVE
}

model Venue {
  id          String      @id @default(uuid())
  name        String
  address     String
  city        String
  state       String
  zip         String
  country     String
  contactInfo String?
  notes       String?
  createdById String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   User        @relation("VenueCreatedBy", fields: [createdById], references: [id])
  rehearsals  Rehearsal[]
}

model Rehearsal {
  id          String           @id @default(uuid())
  bandId      String
  venueId     String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  createdById String
  status      RehearsalStatus  @default(SCHEDULED)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  band        Band             @relation(fields: [bandId], references: [id], onDelete: Cascade)
  venue       Venue            @relation(fields: [venueId], references: [id])
  createdBy   User             @relation("CreatedBy", fields: [createdById], references: [id])
  attendance  Attendance[]
  notes       RehearsalNote[]
}

enum RehearsalStatus {
  SCHEDULED
  CANCELED
  COMPLETED
}

model Attendance {
  id           String           @id @default(uuid())
  rehearsalId  String
  userId       String
  status       AttendanceStatus @default(PENDING)
  attendance   AttendanceRecord?
  notes        String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  rehearsal    Rehearsal        @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([rehearsalId, userId])
}

enum AttendanceStatus {
  CONFIRMED
  DECLINED
  PENDING
}

enum AttendanceRecord {
  PRESENT
  ABSENT
  LATE
}

model Availability {
  id              String           @id @default(uuid())
  userId          String
  dayOfWeek       Int              // 0 = Sunday, 1 = Monday, etc.
  startTime       String           // Format: HH:MM in 24-hour
  endTime         String           // Format: HH:MM in 24-hour
  preferenceLevel PreferenceLevel  @default(PREFERRED)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dayOfWeek, startTime, endTime])
}

enum PreferenceLevel {
  PREFERRED
  ACCEPTABLE
  AVOID
}

model RehearsalNote {
  id           String    @id @default(uuid())
  rehearsalId  String
  createdById  String
  content      String
  attachmentUrl String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  rehearsal    Rehearsal @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  createdBy    User      @relation(fields: [createdById], references: [id])
}

model Notification {
  id           String            @id @default(uuid())
  userId       String
  rehearsalId  String?
  type         NotificationType
  content      String
  read         Boolean           @default(false)
  sentAt       DateTime          @default(now())
  createdAt    DateTime          @default(now())
}

enum NotificationType {
  REMINDER
  UPDATE
  CANCELLATION
}